Q1. What is reused in your modified code, and what is it reused across?
In addition to the reuse in task 2:
I reuse oacts as I increment c many times.
I reuse a row of iacts as k is incremented.

Iacts is resued more since c only increments until the cache is full, and then it can stay to be reused
even if k changes.

Q2. Calculate the expected L1 data cache read miss rate in fc1 before and after your modifications. Explain in detail why you expect this miss rate; unsupported answers will receive no credit.

After task 2: (1/8 + 1/8 + 0)/3 = 1/12

After Task 3 modifications.
oacts still has a 0 miss rate
iacts - For a tile size of 128, there are 128/8 = 16 misses, when getting the first tile of iacts. There are 128 accesses here.
        Then, each element of iacts is reused for the tile size of k, also 128 times. Thus, there are 128 accesses per element * 128 elements.
        Then, iacts has a 1/1032 miss rate.
wts - Continues to have a 1/8 miss rate since 1 cache line contains 8 elements. No additional temporal reuse here.

Rate = (1/8 + 0 + 0)/3 = 1/24 = 4%

Q3. Explain any differences between your expected and measured L1 data cache read miss rates.
Once again, it is likely the compiler is placing some values in register, causing the actual miss rate to be higher at 6%



